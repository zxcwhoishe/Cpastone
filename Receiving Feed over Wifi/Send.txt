# pi_sender.py
import asyncio
from aiortc import RTCPeerConnection, VideoStreamTrack
from aiortc.contrib.signaling import TcpSocketSignaling
from av import VideoFrame
import cv2

class Camera(VideoStreamTrack):
    def __init__(self):
        super().__init__()
        self.cap = cv2.VideoCapture(0)

    async def recv(self):
        pts, time_base = await self.next_timestamp()
        ret, frame = self.cap.read()
        if not ret:
            print("Camera frame not read properly")
            return None
        video_frame = VideoFrame.from_ndarray(frame, format="bgr24")
        video_frame.pts = pts
        video_frame.time_base = time_base
        return video_frame

async def main():
    print("Starting Pi sender...")
    pc = RTCPeerConnection()
    signaling = TcpSocketSignaling("0.0.0.0", 9000)
    pc.addTrack(Camera())

    print("Connecting signaling on port 9000...")
    await signaling.connect()
    print("Signaling connected. Creating offer...")
    offer = await pc.createOffer()
    await pc.setLocalDescription(offer)
    await signaling.send(pc.localDescription)
    print("Offer sent, waiting for answer from receiver...")

    answer = await signaling.receive()
    await pc.setRemoteDescription(answer)
    print("Receiver connected! Streaming video now...")

    # Keep script running
    while True:
        await asyncio.sleep(1)

if __name__ == "__main__":
    asyncio.run(main())
